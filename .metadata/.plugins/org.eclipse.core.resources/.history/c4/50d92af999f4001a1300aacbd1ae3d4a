package br.ufrj.dcc.comp2.ple.raphael.lista1.programa3.figuras;

import java.util.ArrayList;
import java.util.Scanner;

import br.ufrj.dcc.comp2.ple.raphael.lista1.programa3.plano.Ponto2D;

/** Classe principal do pacote. Recebe os pontos e imprime a figura.
 * 
 *	@author Raphael Mesquita &lt;raphafm.rf@gmail.com&gt;
 */
public class Figuras {
  public static void main(String[] args) {
    mostraFigura();
  }

  /**
   * Método responsável por receber da entrada padrão uma sequência de coordenadas e mostrar a figura formada pelos pontos definidos.
   * <p>
   * Pede ao usuário coordenadas dos vértices da figura. Caso não seja uma quantidade par ou tenha algum valor inválido,
   * pede novamente até as condições serem satisfeitas. ATENÇÃO: no caso de um quadrilátero, as coordenadas devem ser passadas ordenadamente, 
   * de forma que os pontos, no plano cartesiano, tenham uma orientação válida e seus lados não se interceptem.
   * </p>
   * <p>
   * O método, então, divide em pares os valores passados e transforma numa lista de pontos <code>ArrayList&lt;Ponto2D&gt;</code> 
   * e a passa como parâmetro para outro método reponsável por identificar a figura;
   * </p>
   */
  public static void mostraFigura() {
    Scanner scanner = new Scanner(System.in);
    
    while(true) {
      System.out.println("Digite abaixo as coordenadas dos vértices da figura(ou do centro, caso seja um círculo) no sentido horário ou anti-horário:");
      String entrada[] = scanner.nextLine().split(" ");
  
      int tamanho = entrada.length;
  
      double coordenadas[] = new double[tamanho];
      try {
        for(int i = 0; i < tamanho; i++) coordenadas[i] = Double.parseDouble(entrada[i]);
        
        ArrayList<Ponto2D> pontos = new ArrayList<>();
        for(int i = 0; i < tamanho; i += 2) {
          pontos.add(new Ponto2D(coordenadas[i], coordenadas[i+1]));
        }

        if(identificaFigura(pontos)) break;

      } catch(NumberFormatException e) {
        System.out.println("Coordenadas inválidas.\n");
      }
    }

    scanner.close();
  }

  /**
   * Identifica a figura através da quantidade de pontos na lista passada por parâmetro e a imprime.
   * No caso do quadrilátero, chama outro método para identificá-lo.
   * Se a quantidade de pontos não representar uma figura disponível, imprime uma mensagem de erro e retorna a condição.
   * @param pontos um <code>ArrayList&lt;Ponto2D&gt;</code>
   * @return <b>boolean</b>
   */
  public static boolean identificaFigura(ArrayList<Ponto2D> pontos) {
    switch(pontos.size()) {
      case 1:
        new Circulo(pontos.get(0));
        break;
      case 3:
        new Triangulo(pontos.get(0), pontos.get(1), pontos.get(2));
        break;
      case 4:
        identificaQuadrilatero(pontos);
        break;
      default:
        System.out.println("Figura indisponível.\n");
        return false;
    }
    return true;
  }

  /**
   * Identifica se o quadrilátero é um retângulo ou um trapézio.
   * <p>
   * Chama métodos estáticos das respectivas figuras para se identificarem.
   * Caso seja um dos quadriláteros válidos, o imprime.
   * Caso contrário, retorna uma mensagem de erro.
   * </p>
   * @param pontos um <code>ArrayList&lt;Ponto2D&gt;</code>
   */
  public static void identificaQuadrilatero(ArrayList<Ponto2D> pontos) {
    Ponto2D A = pontos.get(0); 
    Ponto2D B = pontos.get(1); 
    Ponto2D C = pontos.get(2); 
    Ponto2D D = pontos.get(3);

    if(Retangulo.ehRetangulo(A, B, C, D)) {
      new Retangulo(A, B, C, D);
    } else if (Trapezio.ehTrapezio(A, B, C, D)) {
      new Trapezio(A, B, C, D);      
    } else {
      System.out.println("Quadrilátero indisponível.\n");
    }
  }
}
